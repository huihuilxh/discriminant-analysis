### 两总体的判别分析 ###
## TrnX1--训练样本1
## TrnX2--训练样本2
## TstX---待判样本  
 
discriminiant.distance=function(TrnX1, TrnX2, TstX=NULL, var.equal=FALSE)
  {
   if (is.null(TstX)==TRUE) TstX=rbind(TrnX1,TrnX2)            ## 待判样本为空，则进行回判 
                          ###rbind为把样本1,2按行排列成矩阵###
   
   if (is.vector(TstX)==TRUE)  TstX=t(as.matrix(TstX))  ##如果Tstx是向量，则先转换成矩阵，再转置##       ## 待判样本按行排列 
   else if (is.matrix(TstX)!=TRUE) TstX=as.matrix(TstX)          ####不管是不是矩阵 都转成矩阵###
   
   if (is.matrix(TrnX1)!=TRUE) TrnX1=as.matrix(TrnX1)
   if (is.matrix(TrnX2)!=TRUE) TrnX2=as.matrix(TrnX2)

   nx=nrow(TstX)                                               ## 待判样本个数 
    ###rep(0,nx)把0复制nx遍###
   blong=matrix(rep(0, nx), nrow=1, byrow=TRUE, dimnames=list("blong", 1:nx))   ##一行的矩阵 按行排列##
                                                               ## 判别结果显示矩阵 
   
   mu1=colMeans(TrnX1); mu2=colMeans(TrnX2)                    ## 两总体样本均值 
   
   if (var.equal==TRUE)   ##两总体方差相等##
     {
      S=var(rbind(TrnX1,TrnX2))
      w=mahalanobis(TstX, mu2, S)-mahalanobis(TstX, mu1, S)       ##马氏距离 r自带命令##
     }
   else
     {
      S1=var(TrnX1); S2=var(TrnX2)
      w=mahalanobis(TstX, mu2, S2)-mahalanobis(TstX, mu1, S1)
     }
   for (i in 1:nx)
     {
      if (w[i]>0)
          blong[i]=1    ##判给1##
      else
          blong[i]=2
     }
   return(blong)
}

